// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type RouteGuideHTTPServer interface {
	CallListFeatures(context.Context, *EmptyMsg) (*wrapperspb.StringValue, error)
	CallRouteChat(context.Context, *EmptyMsg) (*wrapperspb.StringValue, error)
}

func RegisterRouteGuideHTTPServer(s *http.Server, srv RouteGuideHTTPServer) {
	r := s.Route("/")
	r.GET("/list_features", _RouteGuide_CallListFeatures0_HTTP_Handler(srv))
	r.GET("/route_chat", _RouteGuide_CallRouteChat0_HTTP_Handler(srv))
}

func _RouteGuide_CallListFeatures0_HTTP_Handler(srv RouteGuideHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmptyMsg
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/routeguide.v1.RouteGuide/CallListFeatures")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CallListFeatures(ctx, req.(*EmptyMsg))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*wrapperspb.StringValue)
		return ctx.Result(200, reply)
	}
}

func _RouteGuide_CallRouteChat0_HTTP_Handler(srv RouteGuideHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmptyMsg
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/routeguide.v1.RouteGuide/CallRouteChat")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CallRouteChat(ctx, req.(*EmptyMsg))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*wrapperspb.StringValue)
		return ctx.Result(200, reply)
	}
}

type RouteGuideHTTPClient interface {
	CallListFeatures(ctx context.Context, req *EmptyMsg, opts ...http.CallOption) (rsp *wrapperspb.StringValue, err error)
	CallRouteChat(ctx context.Context, req *EmptyMsg, opts ...http.CallOption) (rsp *wrapperspb.StringValue, err error)
}

type RouteGuideHTTPClientImpl struct {
	cc *http.Client
}

func NewRouteGuideHTTPClient(client *http.Client) RouteGuideHTTPClient {
	return &RouteGuideHTTPClientImpl{client}
}

func (c *RouteGuideHTTPClientImpl) CallListFeatures(ctx context.Context, in *EmptyMsg, opts ...http.CallOption) (*wrapperspb.StringValue, error) {
	var out wrapperspb.StringValue
	pattern := "/list_features"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/routeguide.v1.RouteGuide/CallListFeatures"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RouteGuideHTTPClientImpl) CallRouteChat(ctx context.Context, in *EmptyMsg, opts ...http.CallOption) (*wrapperspb.StringValue, error) {
	var out wrapperspb.StringValue
	pattern := "/route_chat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/routeguide.v1.RouteGuide/CallRouteChat"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
